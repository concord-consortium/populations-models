// Generated by CoffeeScript 1.6.3
(function() {
  var Agent, BasicAnimal, Environment, Events, Interactive, Rule, Species, ToolButton, Trait, env, helpers, plantSpecies, rabbitSpecies;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Rule = require('models/rule');

  Trait = require('models/trait');

  Interactive = require('ui/interactive');

  Events = require('events');

  ToolButton = require('ui/tool-button');

  BasicAnimal = require('models/agents/basic-animal');

  plantSpecies = require('species/fast-plants-thin');

  rabbitSpecies = require('species/white-rabbits');

  env = require('environments/grass-field');

  window.model = {
    rabbit: null,
    setupEnvironment: function() {
      var i, plant, _i;
      for (i = _i = 0; _i <= 21; i = ++_i) {
        plant = plantSpecies.createAgent();
        plant.set("food quantity", 100);
        plant.set("max offspring distance", 200);
        plant.set("min offspring", 1);
        plant.set("max offspring", 2);
        plant.setLocation(this.env.randomLocation());
        this.env.addAgent(plant);
      }
      this.rabbit = rabbitSpecies.createAgent();
      this.rabbit.setLocation(this.env.randomLocation());
      this.rabbit.set('is selected', true);
      this.rabbit.set('is immortal', true);
      this.rabbit.set('age', 20);
      this.rabbit.set('speed', 0);
      this.rabbit.set('default speed', 0);
      this.rabbit.set('calculate drives', false);
      this.rabbit.set('current behavior', BasicAnimal.BEHAVIOR.WANDERING);
      return this.env.addAgent(this.rabbit);
    },
    run: function() {
      var _this = this;
      this.interactive = new Interactive({
        environment: env,
        speedSlider: false,
        addOrganismButtons: [],
        toolButtons: []
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      this.plantSpecies = plantSpecies;
      this.rabbitSpecies = rabbitSpecies;
      this.setupEnvironment();
      return Events.addEventListener(Environment.EVENTS.RESET, function() {
        return _this.setupEnvironment();
      });
    },
    setupGraph: function() {
      var outputOptions,
        _this = this;
      outputOptions = {
        title: "Number of plants in field",
        xlabel: "Time (s)",
        ylabel: "Number of plants",
        xmax: 30,
        xmin: 0,
        ymax: 80,
        ymin: 0,
        xTickCount: 15,
        yTickCount: 8,
        xFormatter: "2d",
        yFormatter: "2d",
        realTime: false,
        fontScaleRelativeToParent: true,
        sampleInterval: Environment.DEFAULT_RUN_LOOP_DELAY / 1000,
        dataType: 'samples'
      };
      this.outputGraph = LabGrapher('#graph', outputOptions);
      this.outputGraph.addSamples([22]);
      Events.addEventListener(Environment.EVENTS.RESET, function() {
        _this.outputGraph.reset();
        return _this.outputGraph.addSamples([22]);
      });
      return Events.addEventListener(Environment.EVENTS.STEP, function() {
        var a, plants, _i, _len, _ref;
        plants = 0;
        _ref = _this.env.agents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          a = _ref[_i];
          if (a.species === _this.plantSpecies) {
            plants++;
          }
        }
        return _this.outputGraph.addSamples([plants]);
      });
    },
    setupControls: function() {
      var move,
        _this = this;
      this.up = document.getElementById('up');
      this.down = document.getElementById('down');
      this.left = document.getElementById('left');
      this.right = document.getElementById('right');
      move = function(direction) {
        _this.rabbit.set('direction', direction);
        if (_this.env._isRunning) {
          _this.rabbit.set('speed', 20);
          _this.rabbit.move();
          _this.rabbit.set('speed', 0);
        }
        return false;
      };
      this.up.onclick = function() {
        return move(1.5 * Math.PI);
      };
      this.up.ontouchstart = function(evt) {
        evt.preventDefault();
        return move(1.5 * Math.PI);
      };
      this.down.onclick = function() {
        return move(0.5 * Math.PI);
      };
      this.down.ontouchstart = function(evt) {
        evt.preventDefault();
        return move(0.5 * Math.PI);
      };
      this.left.onclick = function() {
        return move(Math.PI);
      };
      this.left.ontouchstart = function(evt) {
        evt.preventDefault();
        return move(Math.PI);
      };
      this.right.onclick = function() {
        return move(0);
      };
      return this.right.ontouchstart = function(evt) {
        evt.preventDefault();
        return move(0);
      };
    },
    setupTimer: function() {
      var time,
        _this = this;
      time = document.getElementById('time-value');
      Events.addEventListener(Environment.EVENTS.RESET, function() {
        return time.innerHTML = "0";
      });
      return Events.addEventListener(Environment.EVENTS.STEP, function() {
        var t;
        t = Math.floor(_this.env.date * Environment.DEFAULT_RUN_LOOP_DELAY / 1000);
        time.innerHTML = "" + t;
        if (t >= 30) {
          _this.env.stop();
          return _this.showMessage('Congratulations! Your bunny was able to find enough food to live!');
        }
      });
    },
    setupHungerSlider: function() {
      var ppslider, slider,
        _this = this;
      slider = document.getElementById('hunger-slider');
      ppslider = $(slider).PPSlider({
        height: 150,
        vertical: true,
        minLabel: 'Not hungry',
        maxLabel: 'Very hungry',
        moveable: false
      });
      return Events.addEventListener(Environment.EVENTS.STEP, function() {
        var hunger;
        if (_this.rabbit.isDead) {
          _this.env.stop();
          _this.showMessage('The bunny died because it was not able to find enough food to live. Click Reset and try again!');
          return;
        }
        hunger = Math.round(100 - _this.rabbit.get('energy'));
        ppslider.updatePositionByValue(hunger);
        if (hunger > 99) {
          _this.rabbit.die();
          return;
        }
        if (hunger > 70) {
          _this.rabbit.set('bubble showing', 'food');
        } else {
          _this.rabbit.set('bubble showing', 'none');
        }
        if (hunger > 5) {
          return _this.rabbit.set('current behavior', BasicAnimal.BEHAVIOR.EATING);
        } else {
          return _this.rabbit.set('current behavior', BasicAnimal.BEHAVIOR.WANDERING);
        }
      });
    },
    showMessage: function(message, pause) {
      if (pause == null) {
        pause = false;
      }
      return helpers.showMessage(message, this.env.getView().view.parentElement);
    }
  };

  window.onload = function() {
    return helpers.preload([env, plantSpecies, rabbitSpecies], function() {
      model.run();
      model.setupGraph();
      model.setupControls();
      model.setupTimer();
      return model.setupHungerSlider();
    });
  };

}).call(this);
